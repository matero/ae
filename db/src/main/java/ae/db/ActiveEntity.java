/*
 * The MIT License
 *
 * Copyright (c) 2018 ActiveEngine.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package ae.db;

import argo.jdom.JsonField;
import argo.jdom.JsonNode;
import argo.jdom.JsonNodeFactories;
import argo.jdom.JsonStringNode;
import com.google.appengine.api.datastore.*;
import com.google.appengine.api.datastore.Query.Filter;
import com.google.appengine.api.datastore.Query.FilterOperator;
import com.google.appengine.api.datastore.Query.FilterPredicate;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Iterables;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.slf4j.Logger;

import java.io.Serializable;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

/**
 * ActiveRecord over google appengine datastore's {@link Entity}.
 * <p>
 * Usually used as base for code generated by db-processor compiler.
 */
public abstract class ActiveEntity implements Serializable {
  /**
   * Kind of modeled Entities.
   */
  protected final @NonNull String kind;

  /**
   * Constructs an active entity defining its kind.
   *
   * @param kind Kind of the active entity.
   */
  protected ActiveEntity(final @NonNull String kind) { this.kind = kind; }

  /**
   * @return the logger associated to the active entity, <em>never</em> {@code null}.
   */
  protected abstract @NonNull Logger log();
  /* **************************************************************************
   * entity construction facilities
   */

  /**
   * Initialize an {@link Entity} after its construction.
   *
   * @param data the {@link Entity} to initialize.
   */
  protected void init(final @NonNull Entity data) { /*nothing to do*/ }

  /* **************************************************************************
   * validation methods
   */
  public boolean isKindOf(final @NonNull Entity data) { return isKindOf(data.getKey()); }

  public boolean isKindOf(final @NonNull Key key) { return kind.equals(key.getKind()); }

  public @Nullable Key keyFrom(final @Nullable String webSafeKey) {
    if (webSafeKey == null) {
      return null;
    }
    final Key key = KeyFactory.stringToKey(webSafeKey);
    if (!isKindOf(key)) {
      throw new IllegalArgumentException("'" + webSafeKey + "' represents '" + key + "' which doesn't identify a '" + kind + "' Entity.");
    }
    return key;
  }

  /* **************************************************************************
   * metadata
   */
  public abstract @NonNull ImmutableList<Attr> modelAttributes();

  public abstract @NonNull Identifier modelIdentifier();

  public abstract @NonNull ImmutableList<Field<?>> modelFields();

  /* **************************************************************************
   * json serialization methods
   */
  public abstract @NonNull JsonNode toJson(final @Nullable Entity data);

  public @NonNull JsonNode toJson(final @Nullable Entity... elements) {
    if (elements == null) {
      return JsonNodeFactories.nullNode();
    }
    if (elements.length == 0) {
      return JsonNodeFactories.array(Collections.<JsonNode>emptyList());
    }
    final List<JsonNode> nodes = new java.util.ArrayList<>(elements.length);
    for (final Entity e : elements) {
      nodes.add(toJson(e));
    }
    return JsonNodeFactories.array(nodes);
  }

  public @NonNull JsonNode toJson(final @Nullable Collection<Entity> elements) {
    if (elements == null) {
      return JsonNodeFactories.nullNode();
    }
    if (elements.isEmpty()) {
      return JsonNodeFactories.array(Collections.<JsonNode>emptyList());
    }
    final List<JsonNode> nodes = new java.util.ArrayList<>(elements.size());
    for (final Entity e : elements) {
      nodes.add(toJson(e));
    }
    return JsonNodeFactories.array(nodes);
  }

  public @NonNull JsonNode toJson(final @Nullable Iterable<Entity> elements) {
    if (elements == null) {
      return JsonNodeFactories.nullNode();
    }
    final List<JsonNode> nodes = new java.util.ArrayList<>(Iterables.size(elements));
    for (final Entity e : elements) {
      nodes.add(toJson(e));
    }
    return JsonNodeFactories.array(nodes);
  }

  public @NonNull JsonNode toJson(final @Nullable Iterator<Entity> elements) {
    if (elements == null) {
      return JsonNodeFactories.nullNode();
    }
    if (elements.hasNext()) {
      final java.util.LinkedList<JsonNode> nodes = new java.util.LinkedList<>();
      do {
        nodes.add(toJson(elements.next()));
      } while (elements.hasNext());
      return JsonNodeFactories.array(nodes);
    } else {
      return JsonNodeFactories.array(Collections.<JsonNode>emptyList());
    }
  }

  public abstract @Nullable Entity fromJson(@NonNull JsonNode data);

  public abstract @Nullable Key keyFromJson(@NonNull JsonNode json);

  protected abstract @NonNull Iterable<JsonField> jsonKeyFields(@NonNull Key key);

  public abstract void updatePropertiesWithJsonContents(@NonNull Entity data, @NonNull JsonNode json);

  /* **************************************************************************
   * persistence methods
   */
  public final @NonNull Key save(final @NonNull Entity data) {
    if (!isKindOf(data)) {
      throw new IllegalArgumentException("Entity with key '" + data.getKey() + "' does not represent " + getClass().getCanonicalName());
    }
    return DatastoreServiceFactory.getDatastoreService().put(data);
  }

  /**
   * Deletes the entity identified by the key
   *
   * @param key Key of the entity to delete.
   */
  public void delete(final @NonNull Key key) {
    if (!isKindOf(key)) {
      throw new IllegalArgumentException("Key '" + key + "' does not represent " + getClass().getCanonicalName());
    }
    DatastoreServiceFactory.getDatastoreService().delete(key);
  }

  public @Nullable Entity find(final @NonNull Key key) {
    if (!isKindOf(key)) {
      throw new IllegalArgumentException("Key '" + key + "' does not represent " + getClass().getCanonicalName());
    }
    try {
      return DatastoreServiceFactory.getDatastoreService().get(key);
    } catch (final EntityNotFoundException e) {
      return null;
    }
  }

  public @NonNull Entity get(final @NonNull Key key) throws EntityNotFoundException {
    if (!isKindOf(key)) {
      throw new IllegalArgumentException("Key '" + key + "' does not represent " + getClass().getCanonicalName());
    }
    return DatastoreServiceFactory.getDatastoreService().get(key);
  }

  public boolean exists(final @NonNull Key key) {
    if (!isKindOf(key)) {
      throw new IllegalArgumentException("Key '" + key + "' does not represent " + getClass().getCanonicalName());
    }
    final Query exists = makeQuery()
                             .setKeysOnly()
                             .setFilter(new FilterPredicate(Entity.KEY_RESERVED_PROPERTY, FilterOperator.EQUAL, key));
    final Entity data = DatastoreServiceFactory.getDatastoreService().prepare(exists).asSingleEntity();
    return data != null;
  }

  public @NonNull Query makeQuery() {
    return new Query(kind);
  }

  public @NonNull Validation validate(final @NonNull Entity data, final @NonNull String successMessage) {
    final Validation validation = Validation.withSuccessMessage(successMessage);
    doValidate(data, validation);
    return validation;
  }

  public @NonNull Validation validate(final @NonNull Entity data, final @NonNull Validation validation) {
    doValidate(data, validation);
    return validation;
  }

  protected abstract void doValidate(@NonNull Entity data, @NonNull Validation validation);

  public static abstract class Identifier extends AttrData {
    protected Identifier(final @NonNull String canonicalName,
                         final @NonNull String description,
                         final @NonNull String field,
                         final @NonNull JsonStringNode jsonName,
                         final @NonNull String jsonPath,
                         final @NonNull ImmutableList<Constraint> constraints) {
      super(canonicalName, description, field, jsonName, jsonPath, constraints);
    }

    @Override public final @NonNull String property() {
      return field();
    }

    @Override public final boolean isDefinedAt(final @NonNull Entity data) {return isDefinedAt(data.getKey());}

    public abstract boolean isDefinedAt(@NonNull Key key);

    public final @NonNull JsonField makeJsonFieldFrom(final @NonNull Entity data) {return makeJsonFieldFrom(data.getKey());}

    public final @NonNull JsonField makeJsonFieldFrom(final @NonNull Key key) {return JsonNodeFactories.field(jsonName(), makeJsonValue(key));}

    @Override public final @NonNull JsonNode makeJsonValue(final @NonNull Entity data) {return makeJsonValue(data.getKey());}

    public abstract @NonNull JsonNode makeJsonValue(@NonNull Key key);
  }

  /* **************************************************************************
   * query building facilities
   */
  final @NonNull Query projection(final @NonNull Filterable<?>... projectedProperties) {
    final Query q = makeQuery();
    for (final Filterable<?> filterable : projectedProperties) {
      q.addProjection(filterable.projection());
    }
    return q;
  }

  final @NonNull Query projection(final @NonNull Iterable<Filterable<?>> projectedProperties) {
    final Query q = makeQuery();
    for (final Filterable<?> filterable : projectedProperties) {
      q.addProjection(filterable.projection());
    }
    return q;
  }

  protected static final @NonNull Filter not(final @NonNull IndexedBoolean flag) {
    return flag.isFalse();
  }

  protected static final @NonNull Filter and(final @NonNull IndexedBoolean flag, final Filter rhs) {
    return Query.CompositeFilterOperator.AND.of(flag.isTrue(), rhs);
  }

  protected static final @NonNull Filter or(final @NonNull IndexedBoolean flag, final Filter rhs) {
    return Query.CompositeFilterOperator.OR.of(flag.isTrue(), rhs);
  }

  protected static final @NonNull Filter and(final @NonNull Filter lhs, final @NonNull IndexedBoolean flag) {
    return Query.CompositeFilterOperator.AND.of(flag.isTrue(), lhs);
  }

  protected static final @NonNull Filter or(final @NonNull Filter lhs, final @NonNull IndexedBoolean flag) {
    return Query.CompositeFilterOperator.OR.of(flag.isTrue(), lhs);
  }

  public static class SelectEntities extends SorteableSelect {
    private static final long serialVersionUID = 5591903627552341816L;

    SelectEntities(final @NonNull Query query, final @NonNull FetchOptions fetchOptions) {
      super(query, fetchOptions);
    }

    public final @NonNull SorteableSelect where(final @NonNull Filter filter) {
      query.setFilter(filter);
      return this;
    }

    public final @NonNull SorteableSelect where(final @NonNull IndexedBoolean flag) {
      query.setFilter(flag.isTrue());
      return this;
    }
  }
}
